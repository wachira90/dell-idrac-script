#!/usr/bin/python3
#
# _author_ = Texas Roemer <Texas_Roemer@Dell.com>
# _version_ = 1.0
#
# Copyright (c) 2024, Dell, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#

import argparse
import getpass
import json
import logging
import os
import re
import requests
import sys
import warnings

from pprint import pprint
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import simpleSplit

warnings.filterwarnings("ignore")

parser = argparse.ArgumentParser(description='Python script using Redfish API with OEM extension to get iDRAC message registry and convert JSON output into a PDF file.')
parser.add_argument('-ip',help='iDRAC IP address', required=False)
parser.add_argument('-u', help='iDRAC username', required=False)
parser.add_argument('-p', help='iDRAC password. If you do not pass in argument -p, script will prompt to enter user password which will not be echoed to the screen.', required=False)
parser.add_argument('-x', help='Pass in X-Auth session token for executing Redfish calls. All Redfish calls will use X-Auth token instead of username/password', required=False)
parser.add_argument('--ssl', help='SSL cert verification for all Redfish calls, pass in value \"true\" or \"false\". By default, this argument is not required and script ignores validating SSL cert for all Redfish calls.', required=False)
parser.add_argument('--script-examples', help='Get executing script examples', action="store_true", dest="script_examples", required=False) 
parser.add_argument('--generate-pdf', help='Dump the complete message registry into a PDF file', action="store_true", dest="generate_pdf", required=False)

args = vars(parser.parse_args())
logging.basicConfig(format='%(message)s', stream=sys.stdout, level=logging.INFO)

def script_examples():
    print("""\n- GetIdracMessageRegistryREDFISH.py -ip 192.168.0.120 -u root -p calvin --generate-pdf, this example will get the complete iDRAC message registry and convert the JSON output into a PDF file.""")
    sys.exit(0)

def check_supported_idrac_version():
    if args["x"]:
        response = requests.get('https://%s/redfish/v1/Registries/Messages/EEMIRegistry' % idrac_ip, verify=verify_cert, headers={'X-Auth-Token': args["x"]})
    else:
        response = requests.get('https://%s/redfish/v1/Registries/Messages/EEMIRegistry' % idrac_ip, verify=verify_cert, auth=(idrac_username, idrac_password))
    data = response.json()
    if response.status_code == 401:
        logging.warning("\n- WARNING, status code %s returned. Incorrect iDRAC username/password or invalid privilege detected." % response.status_code)
        sys.exit(0)
    elif response.status_code != 200:
        logging.warning("\n- WARNING, iDRAC version installed does not support this feature using Redfish API")
        sys.exit(0)

def create_message_registry_pdf():
    if args["x"]:
        response = requests.get('https://%s/redfish/v1/Registries/Messages/EEMIRegistry' % idrac_ip, verify=verify_cert, headers={'X-Auth-Token': args["x"]})
    else:
        response = requests.get('https://%s/redfish/v1/Registries/Messages/EEMIRegistry' % idrac_ip, verify=verify_cert, auth=(idrac_username, idrac_password))
    data = response.json()
    json_data = str(data["Messages"])
    
    # Code below is needed to clean up iDRAC message registry JSON output and make it valid to generate the PDF file. 
    json_data = json_data.replace("User's", "User")
    json_data = json_data.replace("iDRAC's", "iDRAC")
    json_data = json_data.replace("controller's", "controller")
    json_data = json_data.replace("<>|-,+./;[\\]'.","")
    json_data = re.sub("A valid BIOS password.+?'","",json_data)
    json_data = json_data.replace("groups'", "groups")
    json_data = json_data.replace("IOM's.", "IOMs.")
    json_data = json_data.replace("User's", "User")
    json_data = json_data.replace("system Owner's Manual", "system owner manual")
    json_data = json_data.replace("'s ","")
    json_data = json_data.replace("'",'"')
    json_data = json_data.replace('"racadm bezelfilter resetfilerlife"', "'racadm bezelfilter resetfilerlife'")
    json_data = json_data.replace('"racadm setniccfg -m server-<slot number> -d"', "'racadm setniccfg -m server-<slot number> -d'")
    json_data = json_data.replace('"racadm cmcchangeover"', "'racadm cmcchangeover'")
    json_data = json_data.replace('"racadm feature -d -c Extended Storage"', "'racadm feature -d -c Extended Storage'")
    json_data = json_data.replace('"racadm -a -c Extended Storage"', "'racadm -a -c Extended Storage'")
    json_data = json_data.replace('"racadm raid importconfig:<Controller FQDD>"', "'racadm raid importconfig:<Controller FQDD>'")
    json_data = json_data.replace('"racadm raid cryptographicerase:<Drive FQDD>"', "'racadm raid cryptographicerase:<Drive FQDD>'")
    json_data = json_data.replace('"iDRAC with Lifecycle Controller RACADM CLI Guide"', "'iDRAC with Lifecycle Controller RACADM CLI Guide'")
    json_data = json_data.replace('"Bad Block"', "'Bad Block'")
    json_data = json_data.replace('"Replacement,"', "'Replacement'")
    json_data = json_data.replace('"Sense,"', "'Sense'")
    json_data = json_data.replace('"Medium"', "'Medium'")
    json_data = json_data.replace('"racadm racreset"', "'racadm racreset'")
    json_data = json_data.replace('"Unable to start"', "'Unable to start'")
    json_data = json_data.replace('"Cache integrity"', "'Cache integrity'")
    json_data = json_data.replace('"Charger -"', "'Charger -'")
    json_data = json_data.replace('"Battery -"', "'Battery -'")
    json_data = json_data.replace('"terminated"', "'terminated'")
    json_data = json_data.replace('"seconds"', "'seconds'")
    json_data = json_data.replace('"Open"', "'Open'")
    json_data = json_data.replace('"Close"', "'Close'")
    json_data = json_data.replace('"SEL"', "'SEL'")
    json_data = json_data.replace('"Packet loopback test failed"', "'Packet loopback test failed'")
    json_data = json_data.replace('"Register test failed"', "'Register test failed'")
    json_data = json_data.replace('"%4"', "'%4'")
    json_data = json_data.replace('"Log contains Fan events"', "'Log contains Fan events'")
    json_data = json_data.replace('"racadm getsel"', "'racadm getsel'")
    json_data = json_data.replace('", Slot <decimal>"', "'Slot <decimal>'")
    json_data = json_data.replace('"racadm config -g cfgThermal -o cfgThermalEnhancedCoolingMode 0"', "'racadm config -g cfgThermal -o cfgThermalEnhancedCoolingMode 0'")
    json_data = json_data.replace('"racadm chassisaction -m chassis powerdown"', "'racadm chassisaction -m chassis powerdown'")
    json_data = json_data.replace('"racadm <feature> -d"', "'racadm <feature> -d'")
    json_data = json_data.replace('"racadm lclog view"', "'racadm lclog view'")
    json_data = json_data.replace('"racadm jobqueue view"', "'racadm jobqueue view'")
    json_data = json_data.replace('"racadm chassisaction powercycle"', "'racadm chassisaction powercycle'")
    json_data = json_data.replace('"racadm jobqueue"', "'racadm jobqueue'")
    json_data = json_data.replace('"racadm update"', "'racadm update'")
    json_data = json_data.replace('"racadm racreset"', "'racadm racreset'")
    json_data = json_data.replace('"racadm getmodinfo"', "'racadm getmodinfo'")
    json_data = json_data.replace('"iDRACReset()"', "'iDRACReset()'")
    json_data = json_data.replace('"racadm get idrac.sekmcert"', "'racadm get idrac.sekmcert'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisRedundancyPolicy 1"', "'racadm config -g cfgChassisPower -o cfgChassisRedundancyPolicy 1'")
    json_data = json_data.replace('"racadm help system.PcieSlotLFM"', "'racadm help system.PcieSlotLFM'")
    json_data = json_data.replace('"racadm set lifecyclecontroller.LCAttributes.CollectSystemInventoryOnRestart Enabled"', "'racadm set lifecyclecontroller.LCAttributes.CollectSystemInventoryOnRestart Enabled'")
    json_data = json_data.replace('"racadm set idrac.user.Enable.0"', "'racadm set idrac.user.Enable.0'")
    json_data = json_data.replace('"racadm set idrac.user.UserName"', "'racadm set idrac.user.UserName'")
    json_data = json_data.replace('"racadm set idrac.servicemodule.idrachardreset enabled"', "'racadm set idrac.servicemodule.idrachardreset enabled'")
    json_data = json_data.replace('"racadm fwupdate -g -u -a <TFTP server IP Address> -d mainboard.bin -m main_board"', "'racadm fwupdate -g -u -a <TFTP server IP Address> -d mainboard.bin -m main_board'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisPowerCap <Power cap>"', "'racadm config -g cfgChassisPower -o cfgChassisPowerCap <Power cap>'")
    json_data = json_data.replace('"racadm chassisaction -m chassis nongraceshutdown"', "'racadm chassisaction -m chassis nongraceshutdown'")
    json_data = json_data.replace('"racadm chassisaction -m switch-N powercycle (where N is the switch number)"', "'racadm chassisaction -m switch-N powercycle (where N is the switch number)'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisPowerButtonEnable 1"', "'racadm config -g cfgChassisPower -o cfgChassisPowerButtonEnable 1'")
    json_data = json_data.replace('"config -g cfgChassisPower -o cfgChassisPowerCap <value>"', "'config -g cfgChassisPower -o cfgChassisPowerCap <value>'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisAllow110VACOperation 1"', "'racadm config -g cfgChassisPower -o cfgChassisAllow110VACOperation 1'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisPerformanceOverRedundancy 1"', "'racadm config -g cfgChassisPower -o cfgChassisPerformanceOverRedundancy 1'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisSledPowerButtonEnable 1"', "'racadm config -g cfgChassisPower -o cfgChassisSledPowerButtonEnable 1'")
    json_data = json_data.replace('"racadm config -g cfgChassisPower -o cfgChassisSledPowerButtonEnable 0"', "'racadm config -g cfgChassisPower -o cfgChassisSledPowerButtonEnable 0'")
    json_data = json_data.replace('"views for forming a group."', "'views for forming a group.'")
    json_data = json_data.replace('"Server <number> health changed to a non-recoverable state from a less severe state."', "'Server <number> health changed to a non-recoverable state from a less severe state.'")
    json_data = json_data.replace('"black"', "'black'")
    json_data = json_data.replace('"disabled"', "'disabled'")
    json_data = json_data.replace('"Disabled"', "'Disabled'")
    json_data = json_data.replace('"disable"', "'disable'")
    json_data = json_data.replace('"enabled"', "'enabled'")
    json_data = json_data.replace('"Enabled"', "'Enabled'")
    json_data = json_data.replace('"enable"', "'enable'")
    json_data = json_data.replace('"save"', "'save'")
    json_data = json_data.replace('"Service on Host OS"', "'Service on Host OS'")
    json_data = json_data.replace('"iSMSnmpUser"', "'iSMSnmpUser'")
    json_data = json_data.replace('"s."', "'s.'")
    json_data = json_data.replace('"ride-through"', "'ride-through'")
    json_data = json_data.replace('"iDRAC.Embedded.1#Telemetry.1#EnableMetricInjection"', "'iDRAC.Embedded.1#Telemetry.1#EnableMetricInjection'")
    json_data = json_data.replace('"racadm sslcertview -t .', "racadm sslcertview -t.")
    json_data = json_data.replace('"warm reboot"', "'warm reboot'")
    json_data = json_data.replace('"OSName"', "'OSName'")
    json_data = json_data.replace('"IPAddress"', "'IPAddress'")
    json_data = json_data.replace('"ShareName"', "'ShareName'")
    json_data = json_data.replace('"ShareType"', "'ShareType'")
    json_data = json_data.replace('"UserName"', "'UserName'")
    json_data = json_data.replace('"Password"', "'Password'")
    json_data = json_data.replace('"ImageName"', "'ImageName'")
    json_data = json_data.replace('"HashValue"', "'HashValue'")
    json_data = json_data.replace('"HashType"', "'HashType'")
    json_data = json_data.replace('"ResetType"', "'ResetType'")
    json_data = json_data.replace('"Custom"', "'Custom'")
    json_data = json_data.replace('"cooling"', "'cooling'")
    json_data = json_data.replace('"Power Cycle"', "'power cycle'")
    json_data = json_data.replace('"gettracelog"', "'gettracelog'")
    json_data = json_data.replace('"X"', "'X'")
    json_data = json_data.replace('"Predictive Failure"', "'Predictive Failure'")
    json_data = json_data.replace('"Troubleshooting RAID"', "'Troubleshooting RAID'")
    json_data = json_data.replace('"sudo curl -vk GET --unix-socket /var/run/peek_broker.socket http://localhost/peek/pil/status"', "'sudo curl -vk GET --unix-socket /var/run/peek_broker.socket http://localhost/peek/pil/status'")
    json_data = json_data.replace('"No bootable devices"', "'No bootable devices'")
    json_data = json_data.replace('"Reset IDRAC"', "'Reset iDRAC'")
    json_data = json_data.replace('"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset"', "'/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset'")
    json_data = json_data.replace('"Allow 110 VAC Operation"', "'Allow 110 VAC Operation'")
    json_data = json_data.replace('"CMC Technical Guide"', "'CMC Technical Guide'")
    json_data = json_data.replace('"pwrstate"', "'pwrstate'")
    json_data = json_data.replace('"normal system operation"', "'normal system operation'")
    json_data = json_data.replace('"A/B Grid Redundant"', "'A/B Grid Redundant'")
    json_data = json_data.replace('"Not Redundant"', "'Not Redundant'")
    json_data = json_data.replace('"Grid A Current Cap Setting"', "'Grid A Current Cap Setting'")
    json_data = json_data.replace('"Grid B Current Cap Setting"', "'Grid B Current Cap Setting'")
    json_data = json_data.replace('"internal system error"', "'internal system error'")
    json_data = json_data.replace('"System Current Cap Setting"', "'System Current Cap Setting'")
    json_data = json_data.replace('"Chassis Overview"', "'Chassis Overview'")
    json_data = json_data.replace('"power off"', "'power off'")
    json_data = json_data.replace('"Disable power button for all multinode sleds in the chassis"', "'Disable power button for all multinode sleds in the chassis'")
    json_data = json_data.replace('"Disable power button for all multinode sleds in the chassis check box."', "'Disable power button for all multinode sleds in the chassis check box.'")
    json_data = json_data.replace('chassis"', "chassis")
    json_data = json_data.replace('"janedoe@email.com"', "'janedoe@email.com'")
    json_data = json_data.replace('or "', "or '")
    json_data = json_data.replace('"Domain Name From DHCP"', "'Domain Name From DHCP'")
    json_data = json_data.replace('"DNS Domain Name From DHCP"', "'DNS Domain Name from DHCP'")
    json_data = json_data.replace('"DNS From DHCP"', "'DNS from DHCP'")
    json_data = json_data.replace('DHCP"', "'DHCP'")
    json_data = json_data.replace('minute"', "minute'")
    json_data = json_data.replace('"minute', "'minute")
    json_data = json_data.replace('"while scheduling a job."', "'while scheduling a job.'")
    json_data = json_data.replace('hour"', "hour'")
    json_data = json_data.replace('"hour', "'hour")
    json_data = json_data.replace('time"', "time'")
    json_data = json_data.replace('"time', "'time")
    json_data = json_data.replace('month"', "month'")
    json_data = json_data.replace('"month', "'month")
    json_data = json_data.replace('year"', "year'")
    json_data = json_data.replace('"year', "'year")
    json_data = json_data.replace('day"', "day'")
    json_data = json_data.replace('"day', "'day")
    json_data = json_data.replace('recurrence frequency"', "recurrence frequency'")
    json_data = json_data.replace('"recurrence frequency', "'recurrence frequency")
    json_data = json_data.replace('day of the week"', "day of the week'")
    json_data = json_data.replace('"day of the week', "'day of the week")
    json_data = json_data.replace('week of the month"', "week of the month'")
    json_data = json_data.replace('"week of the month', "'week of the month")
    json_data = json_data.replace('"Manage and Monitor"', "'Manage and Monitor'")
    json_data = json_data.replace('"racadm set iDRAC.RFS"', "'racadm set iDRAC.RFS'")
    json_data = json_data.replace('"ClearTransferSession"', "'ClearTransferSession'")
    json_data = json_data.replace('"racadm set iDRAC.IPv6.AutoConfig <0 | Disabled >"', "'racadm set iDRAC.IPv6.AutoConfig <0 | Disabled >'")
    json_data = json_data.replace('"racadm set iDRAC.IPv6.DNSFromDHCP6 <0 | Disabled>"', "'racadm set iDRAC.IPv6.DNSFromDHCP6 <0 | Disabled>'")
    json_data = json_data.replace('"racadm set iDRAC.SmartCard.LogonEnable <0 | Disabled>"', "'racadm set iDRAC.SmartCard.LogonEnable <0 | Disabled>'")
    json_data = json_data.replace('"racadm set iDRAC.SmartCard.SmartCardLogonEnable <1 | Enabled>"', "'racadm set iDRAC.SmartCard.SmartCardLogonEnable <1 | Enabled>'")
    json_data = json_data.replace('"racadm set iDRAC.ActiveDirectory.SSOEnable <0 | Disabled>"', "'racadm set iDRAC.ActiveDirectory.SSOEnable <0 | Disabled>'")
    json_data = json_data.replace('"racadm jobqueue view -i <Job ID>"', " 'racadm jobqueue view -i <Job ID>'")
    json_data = json_data.replace('"racadm set System.Power.Cap.Enable < 1 | Enabled >"', "'racadm set System.Power.Cap.Enable < 1 | Enabled >'")
    json_data = json_data.replace('"racadm set idrac.nic.selection <value>"', "'racadm set idrac.nic.selection <value>'")
    json_data = json_data.replace('"None"', "'None'")
    json_data = json_data.replace('"racadm set iDRAC.Users.<index>.SNMPv3PrivacyType none"', "'racadm set iDRAC.Users.<index>.SNMPv3PrivacyType none'")
    json_data = json_data.replace('"jobqueue"', "'jobqueue'")
    json_data = json_data.replace('"racadm help NIC.IscsiSecondTgtParams"', "'racadm help NIC.IscsiSecondTgtParams'")
    json_data = json_data.replace('"racadm jobqueue view -i JID_xxxxx"', "'racadm jobqueue view -i JID_xxxxx'")
    json_data = json_data.replace('"racadm help <device class>.<group name>.<object name>"', "'racadm help <device class>.<group name>.<object name>'")
    json_data = json_data.replace('"3"', "'3'")
    json_data = json_data.replace('"racadm set iDRAC.ActiveDirectory.DCLookupDomainName <Name>"', "'racadm set iDRAC.ActiveDirectory.DCLookupDomainName <Name>'")
    json_data = json_data.replace('"racadm set iDRAC.IPv4.DNS1 <address>"', "'racadm set iDRAC.IPv4.DNS1 <address>'")
    json_data = json_data.replace('"racadm set idrac.users.<index>.SNMPv3AuthenticationType <value>"', "'racadm set idrac.users.<index>.SNMPv3AuthenticationType <value>'")
    json_data = json_data.replace('"racadm help <device class>.<group name>.<object name>"', "'racadm help <device class>.<group name>.<object name>'")
    json_data = json_data.replace('"racadm help <device class>.<group name>"', "'racadm help <device class>.<group name>'")
    json_data = json_data.replace('"racadm serveraction powerdown -f"', "'racadm serveraction powerdown -f'")
    json_data = json_data.replace('"racadm get group"', "'racadm get group'")
    json_data = json_data.replace('"racadm help clearpending"', "'racadm help clearpending'")
    json_data = json_data.replace('"racadm help jobqueue"', "'racadm help jobqueue'")
    json_data = json_data.replace('"racadm jobqueue help delete"', "'racadm jobqueue help delete'")
    json_data = json_data.replace('"racadm help autoupdatescheduler"', "'racadm help autoupdatescheduler'")
    json_data = json_data.replace('"racadm set lifecyclecontroller.lcattributes.autoupdate 1"', "'racadm set lifecyclecontroller.lcattributes.autoupdate 1'")
    json_data = json_data.replace('"racadm autoupdatescheduler create"', "'racadm autoupdatescheduler create'")
    json_data = json_data.replace('"racadm set lifecyclecontroller.lcattributes.autobackup 1"', "'racadm set lifecyclecontroller.lcattributes.autobackup 1'")
    json_data = json_data.replace('"racadm help systemconfig backup"', "'racadm help systemconfig backup'")
    json_data = json_data.replace('"racadm set LifecycleController.LCAttributes.LifecycleControllerState 1"', "'racadm set LifecycleController.LCAttributes.LifecycleControllerState 1'")
    json_data = json_data.replace('"racadm set LifecycleController.LCAttributes.CollectSystemInventoryOnRestart 1"', "'racadm set LifecycleController.LCAttributes.CollectSystemInventoryOnRestart 1'")
    json_data = json_data.replace('"racadm jobqueue view -i <JobID>"', "'racadm jobqueue view -i <JobID>'")
    json_data = json_data.replace('"racadm help systemerase"', "'racadm help systemerase'")
    json_data = json_data.replace('"racadm systemconfig backup"', "'racadm systemconfig backup'")
    json_data = json_data.replace('"racadm swinventory"', "'racadm swinventory'")
    json_data = json_data.replace('"racadm getsensorinfo"', "'racadm getsensorinfo'")
    json_data = json_data.replace('"racadm set iDRAC.PCIeVDM.PCIIDDenyList "', "'racadm set iDRAC.PCIeVDM.PCIIDDenyList' ")
    json_data = json_data.replace('string"".', "string.")
    json_data = json_data.replace('"racadm set iDRAC.PCIeVDM.PCIIDAllowList "', "'racadm set iDRAC.PCIeVDM.PCIIDDenyList' ")
    json_data = json_data.replace('string"".', "string.")
    json_data = json_data.replace('"restart flag"', "'restart flag'")
    json_data = json_data.replace('"true"', "'true'")
    json_data = json_data.replace('"false"', "'false'")
    json_data = json_data.replace('"--verifycatalog"', "'--verifycatalog'")
    json_data = json_data.replace('"http"', "'http'")
    json_data = json_data.replace('"https"', "'https'")
    json_data = json_data.replace('https"', "https'")
    json_data = json_data.replace('"racadm help idrac.serverboot.firstbootdevice"', "'racadm help idrac.serverboot.firstbootdevice'")
    json_data = json_data.replace('"racadm help <subcommand>"', "'racadm help <subcommand>'")
    json_data = json_data.replace('"racadm diagnostics run"', "'racadm diagnostics run'")
    json_data = json_data.replace('"Start Time"', "'Start Time'")
    json_data = json_data.replace('"Expiration Time"', "'Expiration Time'")
    json_data = json_data.replace('"racadm set iDRAC.Users.<user index>.SNMPv3Enable 1"', "'racadm set iDRAC.Users.<user index>.SNMPv3Enable 1'")
    json_data = json_data.replace('"racadm help update"', "'racadm help update'")
    json_data = json_data.replace('"racadm jobqueue view -i <job ID>"', "'racadm jobqueue view -i <job ID>'")
    json_data = json_data.replace('"TRUE"', "'TRUE'")
    json_data = json_data.replace('"FALSE"', "'FALSE'")
    json_data = json_data.replace('"racadm help lclog export"', "'racadm help lclog export'")
    json_data = json_data.replace('"racadm set iDRAC.Users.<user index>.SNMPv3Enable 1"', "'racadm set iDRAC.Users.<user index>.SNMPv3Enable 1'")
    json_data = json_data.replace('"racadm jobqueue view -i <job id>"', "'racadm jobqueue view -i <job id>'")
    json_data = json_data.replace('"racadm help techsupreport export"', "'racadm help techsupreport export'")
    json_data = json_data.replace('"racadm get iDRAC.ServiceModule"', "'racadm get iDRAC.ServiceModule'")
    json_data = json_data.replace('"racadm gethostnetworkinterfaces"', "'racadm gethostnetworkinterfaces'")
    json_data = json_data.replace('"racadm get iDRAC.ServiceModule to make sure that iDRAC Service Module', "'racadm get iDRAC.ServiceModule' to make sure that iDRAC Service Module")
    json_data = json_data.replace('"getconfig"', "'getconfig'")
    json_data = json_data.replace('"racadm get"', "'racadm get'")
    json_data = json_data.replace('"racadm help get"', "'racadm help get'")
    json_data = json_data.replace('"libssl.so"', "'libssl.so'")
    json_data = json_data.replace('"ln"', "'ln'")
    json_data = json_data.replace('"racadm get iDRAC.Security"', "'racadm get iDRAC.Security'")
    json_data = json_data.replace('"racadm getractime"', "'racadm getractime'")
    json_data = json_data.replace('"racadm', "'racadm")
    json_data = json_data.replace('"racadm set BIOS.integratedDevices.osWatchdogTimer Disabled "', "'racadm set BIOS.integratedDevices.osWatchdogTimer Disabled'")
    json_data = json_data.replace('Disabled "', "Disabled'")
    json_data = json_data.replace('register"', "register'")
    json_data = json_data.replace('Custom"', "Custom'")
    json_data = json_data.replace('"racadm bioscert help delete"', "'racadm bioscert help delete'")
    json_data = json_data.replace('delete"', "delete'")
    json_data = json_data.replace('racadm sslcertdownload -f <filename> -t 4"', "racadm sslcertdownload -f <filename> -t 4'")
    json_data = json_data.replace('racadm set bios.syssecurity.securebootmode UserMode"', "racadm set bios.syssecurity.securebootmode UserMode'")
    json_data = json_data.replace('"New"', "'New'")
    json_data = json_data.replace('"Downloading"', "'Downloading'")
    json_data = json_data.replace('"Running"', "'Running'")
    json_data = json_data.replace('Running"', "Running'")
    json_data = json_data.replace('racadm set"', "racadm set'")
    json_data = json_data.replace('racadm help recover"', "racadm help recover'")
    json_data = json_data.replace('"sslencryptionstrength get"', "'sslencryptionstrength get'")
    json_data = json_data.replace('"racadm get iDRAC.WebServer.SSLEncryptionBitLength"', "'racadm get iDRAC.WebServer.SSLEncryptionBitLength'")
    json_data = json_data.replace('racadm get iDRAC.WebServer.SSLEncryptionBitLength"', "racadm get iDRAC.WebServer.SSLEncryptionBitLength'")
    json_data = json_data.replace('racadm help iDRAC.WebServer.SSLEncryptionBitLength"', "racadm help iDRAC.WebServer.SSLEncryptionBitLength'")
    json_data = json_data.replace('"sslencryptionstrength set"', "'sslencryptionstrength set'")
    json_data = json_data.replace('racadm set iDRAC.WebServer.SSLEncryptionBitLength"', "racadm set iDRAC.WebServer.SSLEncryptionBitLength'")
    json_data = json_data.replace('"attach"', "'attach'")
    json_data = json_data.replace('"detach"', "'detach'")
    json_data = json_data.replace('"racadm jobqueue view -i "', "'racadm jobqueue view -i <job id>'")
    json_data = json_data.replace('"unpack and attach"', "'unpack and attach'")
    json_data = json_data.replace('racadm jobqueue view -i "', "racadm jobqueue view -i '")
    json_data = json_data.replace('"httpbootcert delete"', "'httpbootcert delete'")
    json_data = json_data.replace('"httpbootcert', "'httpbootcert")
    json_data = json_data.replace('racadm update -f "', "racadm update -f'")
    json_data = json_data.replace('racadm biosscan -s 0"', "racadm biosscan -s 0'")
    json_data = json_data.replace('racadm help biosscan"', "racadm help biosscan'")
    json_data = json_data.replace('racadm help idrac.security"', "racadm help idrac.security'")
    json_data = json_data.replace('racadm sslcertupload -f -t"', "racadm sslcertupload -f -t'")
    json_data = json_data.replace('racadm jobqueue view -i jobID "', "racadm jobqueue view -i jobID '")
    json_data = json_data.replace('racadm help set"', "racadm help set'")
    json_data = json_data.replace('racadm %1"', "racadm %1'")
    json_data = json_data.replace('"%2"', "'%2'")
    json_data = json_data.replace('"xml"', "'xml'")
    json_data = json_data.replace('"HostSNMPAlert"', "'HostSNMPAlert'")
    json_data = json_data.replace('"Enable SNMP Alerts via Host OS"', "'Enable SNMP Alerts via Host OS'")
    json_data = json_data.replace('racadm sekm disable"', "racadm sekm disable'")
    json_data = json_data.replace('"SerialCapture.1.Enable"', "'SerialCapture.1.Enable'")
    json_data = json_data.replace('racadm set idrac.nic.selection <1 | Dedicated>"', "racadm set idrac.nic.selection <1 | Dedicated>'")
    json_data = json_data.replace('"Auto Dedicated NIC"', "'Auto Dedicated NIC'")
    json_data = json_data.replace('"Dedicated NIC"', "'Dedicated NIC'")
    json_data = json_data.replace('"Shared NIC"', "'Shared NIC'")
    json_data = json_data.replace('racadm help [command]"', "racadm help [command]'")
    json_data = json_data.replace('racadm get LifeCycleController.LCAttributes.LifecycleControllerState"', "racadm get LifeCycleController.LCAttributes.LifecycleControllerState'")
    json_data = json_data.replace('"Graceful"', "'Graceful'")
    json_data = json_data.replace('"Forced"', "'Forced'")
    json_data = json_data.replace('Forced"', "Forced'")
    json_data = json_data.replace('"On"', "'On'")
    json_data = json_data.replace('"Off"', "'Off'")
    json_data = json_data.replace('Off"', "Off'")
    json_data = json_data.replace('"vmkey"', "'vmkey'")
    json_data = json_data.replace('"vflashsd"', "'vflashsd'")
    json_data = json_data.replace('racadm help vflashsd"', "racadm help vflashsd'")
    json_data = json_data.replace('racadm set lifecyclecontroller.lcattributes.lifecyclecontrollerstate 1"', "racadm set lifecyclecontroller.lcattributes.lifecyclecontrollerstate 1'")
    json_data = json_data.replace('"Scheduled"', "'Scheduled'")
    json_data = json_data.replace('"Completed"', "'Completed'")
    json_data = json_data.replace('Failed"', "Failed'")
    json_data = json_data.replace('"jobqueue delete --all"', "'jobqueue delete --all'")
    json_data = json_data.replace('racadm jobqueue delete -i <job ID>"', "racadm jobqueue delete -i <job ID>'")
    json_data = json_data.replace('racadm set iDRAC.NIC.DNSRacName <Name>"', "racadm set iDRAC.NIC.DNSRacName <Name>'")
    json_data = json_data.replace('racadm set iDRAC.NIC.Enable < 1 | Enabled >"', "racadm set iDRAC.NIC.Enable < 1 | Enabled >'")
    json_data = json_data.replace('racadm set iDRAC.IPv6.AutoConfig < 1 | Enabled >"', "racadm set iDRAC.IPv6.AutoConfig < 1 | Enabled >'")
    json_data = json_data.replace('"Exit"', "'Exit'")
    json_data = json_data.replace('All components"', "All components")
    json_data = json_data.replace('racadm set lifecycleController.lcattributes.AutoBackup 1"', "racadm set lifecycleController.lcattributes.AutoBackup 1'")
    json_data = json_data.replace('racadm set lifecycleController.lcattributes.AutoUpdate 1"', "racadm set lifecycleController.lcattributes.AutoUpdate 1'")
    json_data = json_data.replace('"Apply Changes"', "'Apply Changes'")
    json_data = json_data.replace('racadm racresetcfg"', "racadm racresetcfg'")
    json_data = json_data.replace('"delete"', "'delete'")
    json_data = json_data.replace('"delete', "'delete")
    json_data = json_data.replace('racadm raid get pdisks -o -p status"', "racadm raid get pdisks -o -p status'")
    json_data = json_data.replace('"issuer"', "'issuer'")
    json_data = json_data.replace('"jwks_uri"', "'jwks_uri'")
    json_data = json_data.replace('"Keys"', "'Keys'")
    json_data = json_data.replace('"keys"', "'keys'")
    json_data = json_data.replace('"iss"', "'iss'")
    json_data = json_data.replace('"nbf"', "'nbf'")
    json_data = json_data.replace('racadm config -g cfgractuning -o cfgRacTuneDefCredentialWarningEnable 0"', "racadm config -g cfgractuning -o cfgRacTuneDefCredentialWarningEnable 0'")
    json_data = json_data.replace('"racadm config -g cfgractuning -o cfgRacTuneDefCredentialWarningEnable 0"', "'racadm config -g cfgractuning -o cfgRacTuneDefCredentialWarningEnable 0'")
    json_data = json_data.replace('racadm set iDRAC.Users.<index>.Password <new password string>"', "racadm set iDRAC.Users.<index>.Password <new password string>'")
    json_data = json_data.replace('racadm sslcertupload -f <filename> -t 6"', "racadm sslcertupload -f <filename> -t 6'")
    json_data = json_data.replace('racadm sslcertupload -f <filename> -t 7"', "racadm sslcertupload -f <filename> -t 7'")
    json_data = json_data.replace('racadm jobqueue view -i %1"', "racadm jobqueue view -i %1'")
    json_data = json_data.replace('racadm sekm enable"', "racadm sekm enable'")
    json_data = json_data.replace('racadm sekm disable"', "racadm sekm enable'")
    json_data = json_data.replace('"No SEKM License detected but SEKM libraries exist"', "'No SEKM License detected but SEKM libraries exist'")
    json_data = json_data.replace('"No SEKM libraries but SEKM license detected"', "'No SEKM libraries but SEKM license detected'")
    json_data = json_data.replace('CMC"s/MM"s', "CMC/MM")
    json_data = json_data.replace('CMC"s/MMand', "CMC/MM and")
    json_data = json_data.replace('CMC"s/MMto', "CMC/MM to")
    json_data = json_data.replace('racadm getsel -E"', "racadm getsel -E' ")
    json_data = json_data.replace('racadm chassisaction reset"', "racadm chassisaction reset'")
    json_data = json_data.replace('racadm jobqueue delete --all"', "racadm jobqueue delete --all' ")
    json_data = json_data.replace('racadm supportassist accepteula"', "racadm supportassist accepteula'")
    json_data = json_data.replace('racadm supportassist collect"', "racadm supportassist collect'")
    json_data = json_data.replace('racadm set idrac.os-bmc.AdminState Enabled"', "racadm set idrac.os-bmc.AdminState Enabled'")
    json_data = json_data.replace('racadm set idrac.supportassist.HostOSProxyConfigured Yes"', "racadm set idrac.supportassist.HostOSProxyConfigured Yes'")
    json_data = json_data.replace('racadm supportassist autocollectscheduler create"', "racadm supportassist autocollectscheduler create'")
    json_data = json_data.replace('racadm set idrac.lockdown.SystemLockdownMode Enabled"', "racadm set idrac.lockdown.SystemLockdownMode Enabled'")
    json_data = json_data.replace('racadm storage get pdisks -o -p size"', "racadm storage get pdisks -o -p size'")
    json_data = json_data.replace('racadm raid get pdisks -o -p securityStatus,ForeignKeyIdentifier"', "racadm raid get pdisks -o -p securityStatus,ForeignKeyIdentifier'")
    json_data = json_data.replace('racadm serveraction powercycle"', "racadm serveraction powercycle'")
    json_data = json_data.replace('racadm storage get controllers -o -p UnmapSupport,UnmapState"', "racadm storage get controllers -o -p UnmapSupport,UnmapState'")
    json_data = json_data.replace('racadm storage get pdisks -o -p UnmapCapabilityForVDConfig"', "racadm storage get pdisks -o -p UnmapCapabilityForVDConfig'")
    json_data = json_data.replace('racadm storage get controllers -o -p UnmapSupport,UnmapState"', "racadm storage get controllers -o -p UnmapSupport,UnmapState'")
    json_data = json_data.replace('racadm storage get vdisks -o -p UnmapCapability"', "racadm storage get vdisks -o -p UnmapCapability'")
    json_data = json_data.replace('"sanitize in progress"', "'sanitize in progress'")
    json_data = json_data.replace('sanitize failed"', "sanitize failed'")
    json_data = json_data.replace('"Remaining Write Rated Endurance"', "'Remaining Write Rated Endurance'")
    json_data = json_data.replace('"Available Spare Alert"', "'Available Spare Alert'")
    json_data = json_data.replace('"MD Software RAID"', "'MD Software RAID'")
    json_data = json_data.replace('racadm help raid"', "racadm help raid'")
    json_data = json_data.replace('racadm help storage"', "racadm help storage'")
    json_data = json_data.replace('"RAID Controller"', "'RAID Controller'")
    json_data = json_data.replace('"RAID Controller "', "'RAID Controller '")
    json_data = json_data.replace('racadm storage get vdisks -o -p size"', "racadm storage get vdisks -o -p size'")
    json_data = json_data.replace('"EncryptionMode"', "'EncryptionMode'")
    json_data = json_data.replace('"Supported with SEKM"', "'Supported with SEKM'")
    json_data = json_data.replace('"Unmap-capable for VD configuration"', "'Unmap-capable for VD configuration'")
    json_data = json_data.replace('\"Troubleshooting"', 'Troubleshooting')
    json_data = json_data.replace('"Sanitize in Progress"', "'Sanitize in Progress'")
    json_data = json_data.replace("'racadm set idrac.users.n.SNMPv3AuthenticationPassphrase", "'racadm set idrac.users.n.SNMPv3AuthenticationPassphrase'")
    json_data = json_data.replace("'racadm set idrac.users.n.SNMPv3PrivacyPassphrase", "'racadm set idrac.users.n.SNMPv3PrivacyPassphrase'")
    json_data = json_data.replace('" and', ' and')
    json_data = json_data.replace('". Here', '. Here')
    json_data = json_data.replace('"Integrity check failed"', "'Integrity check failed'")
    json_data = json_data.replace('"Server is powered off or POST not complete"', "'Server is powered off or POST not complete'")
    json_data = json_data.replace('"Resource busy"', "'Resource busy'")
    json_data = json_data.replace('"- Retry the operation at a later point."', "'- Retry the operation at a later point.'")
    json_data = json_data.replace('Internal error"', "Internal error'")
    json_data = json_data.replace('racadm getversion"', 'racadm getversion')
    json_data = json_data.replace('racadm ping <DNS or IP address> "', 'racadm ping <DNS or IP address>')
    json_data = json_data.replace('"root"', "'root'")
    json_data = json_data.replace('racadm ping server-<slot number> "', "racadm ping server-<slot number> '")
    json_data = json_data.replace('racadm racreset -m server-<slot id>"', "racadm racreset -m server-<slot id>'")
    json_data = json_data.replace('"unassigned"', "'unassigned'")
    json_data = json_data.replace('"assigned"', "'assigned'")
    json_data = json_data.replace('"active"', "'active'")
    json_data = json_data.replace('"Add MAC Address"', "'Add MAC Address'")
    json_data = json_data.replace('"Manage Virtual MAC Address Pool"', "'Manage Virtual MAC Address Pool'")
    json_data = json_data.replace('"Clear Identity"', "'Clear Identity'")
    json_data = json_data.replace('"Boot Identity Profiles"', "'Boot Identity Profiles'")
    json_data = json_data.replace('Profile "%1', 'Profile %1')
    json_data = json_data.replace('"Test Network"', "'Test Network'")
    json_data = json_data.replace('racadm set idrac.nic.Selection Dedicated"', "racadm set idrac.nic.Selection Dedicated'")
    json_data = json_data.replace('racadm serveraction -f -m sled-<slot number> reseat"', "racadm serveraction -f -m sled-<slot number> reseat'")
    json_data = json_data.replace('racadm set LifecycleController.LCAttributes.LifecycleControllerState Enabled"', "racadm set LifecycleController.LCAttributes.LifecycleControllerState Enabled'")
    json_data = json_data.replace('"F1/F2 Prompt on Error"', "'F1/F2 Prompt on Error'")
    json_data = json_data.replace('racadm set lifecyclecontroller.LCAttributes.LifecycleControllerState Enabled"', "racadm set lifecyclecontroller.LCAttributes.LifecycleControllerState Enabled'")
    json_data = json_data.replace('"SystemEraseCapability"', "'SystemEraseCapability'")
    json_data = json_data.replace('"SecureErasePD"', "'SecureErasePD'")
    json_data = json_data.replace('"OverwritePD"', "'OverwritePD'")
    json_data = json_data.replace('OverwritePD"', "OverwritePD'")
    json_data = json_data.replace('racadm storage deletevd:"', "racadm storage deletevd:'")
    json_data = json_data.replace('racadm set idrac.security.fipsmode enabled"', "racadm set idrac.security.fipsmode enabled'")
    json_data = json_data.replace('"idrac"', "'idrac'")
    json_data = json_data.replace('"N"', "'N'")
    json_data = json_data.replace('"Redfish.1#NumericDynamicSegmentsEnable"', "'Redfish.1#NumericDynamicSegmentsEnable'")
    json_data = json_data.replace('"Managers OemAttributes"', "'Managers OemAttributes'")
    json_data = json_data.replace('"Tasks"', "'Tasks'")
    json_data = json_data.replace('"Manager Reset Actions"', "'Manager Reset Actions'")
    json_data = json_data.replace('"request body"', "'request body'")
    json_data = json_data.replace('"On with pre-boot measurement"', "'On with pre-boot measurement'")
    json_data = json_data.replace('"Activate"', "'Activate'")
    json_data = json_data.replace('"Clear"', "'Clear'")
    json_data = json_data.replace('"Memory Mapped I/O above 4GB"', "'Memory Mapped I/O above 4GB'")
    json_data = json_data.replace('DIMM"s', 'DIMM')
    json_data = json_data.replace('"TLS Authentication Mode"', "'TLS Authentication Mode'")
    json_data = json_data.replace('"Network Settings"', "'Network Settings'")
    json_data = json_data.replace('"HTTP Device Settings"', "'HTTP Device Settings'")
    json_data = json_data.replace('"Root Certificate Configuration"', "'Root Certificate Configuration'")
    json_data = json_data.replace('"https"', "'https'")
    json_data = json_data.replace('"None"', "'None'")
    json_data = json_data.replace('"TLS Authentication Configuration"', "'TLS Authentication Configuration'")
    json_data = json_data.replace('"https:// and configure necessary network environment', 'https:// and configure necessary network environment')
    json_data = json_data.replace('racadm set idrac.vFlashSD.Enable 0"', "racadm set idrac.vFlashSD.Enable 0'")
    json_data = json_data.replace('racadm set idrac.vFlashSD.Enable 1"', "racadm set idrac.vFlashSD.Enable 1'")
    json_data = json_data.replace('racadm vflashsd initialize"', "racadm vflashsd initialize'")
    json_data = json_data.replace('racadm set idrac.vFlashPartition.<index>.accesstype 1"', "racadm set idrac.vFlashPartition.<index>.accesstype 1'")
    json_data = json_data.replace('"attached"', "'attached'")
    json_data = json_data.replace('racadm set iDRAC.vflashpartition.<partition number>.attachstate 0"', "racadm set iDRAC.vflashpartition.<partition number>.attachstate 0'")
    json_data = json_data.replace("'Server <number> health changed to a non-recoverable state from a less severe state.'", '"Server <number> health changed to a non-recoverable state from a less severe state."')
    json_data = json_data.replace(": 'Completed'", ': "Completed"')
    json_data = json_data.replace('User\\Guide', 'User Guide')
    json_data = json_data.replace('However, all jobs in one of these states: "Completed"', "However, all jobs in one of these states: 'Completed'")
    json_data = json_data.replace('refer to the \\Troubleshooting', 'refer to the Troubleshooting')

    # Code to copy the JSON content to PDF file.
    data = json.loads(json_data)
    pdf_file = "iDRAC_message_registry.pdf"
    create_canvas = canvas.Canvas(pdf_file, pagesize=letter)
    width, height = letter
    title = "iDRAC Message Registry"
    create_canvas.setFont("Helvetica-Bold", 16)
    title_width = create_canvas.stringWidth(title, "Helvetica-Bold", 16)
    create_canvas.drawString((width - title_width) / 2, height - 50, title)
    create_canvas.setFont("Helvetica", 12)
    y = height - 80
    def add_dict_to_pdf(c, data, x, y, indent=0):
        indent_space = 20
        line_height = 14
        max_width = width - 2 * x
        for key, value in data.items():
            if y < 2 * line_height:
                create_canvas.showPage()
                create_canvas.setFont("Helvetica", 12)
                y = height - 50
            text = f"{' ' * indent}{key}:"
            create_canvas.drawString(x, y, text)
            y -= line_height
            if isinstance(value, dict):
                y = add_dict_to_pdf(create_canvas, value, x + indent_space, y, indent + 1)
            elif isinstance(value, list):
                for item in value:
                    if y < line_height:
                        create_canvas.showPage()
                        create_canvas.setFont("Helvetica", 12)
                        y = height - 50
                    create_canvas.drawString(x + indent_space, y, f"{' ' * (indent + 1)}- {item}")
                    y -= line_height
            else:
                lines = simpleSplit(str(value), 'Helvetica', 12, max_width - indent_space)
                for line in lines:
                    if y < line_height:
                        create_canvas.showPage()
                        create_canvas.setFont("Helvetica", 12)
                        y = height - 50

                    create_canvas.drawString(x + indent_space, y, f"{' ' * (indent + 1)}{line}")
                    y -= line_height
            y -= line_height
            if y < line_height:
                create_canvas.showPage()
                create_canvas.setFont("Helvetica", 12)
                y = height - 50
        return y
    y = add_dict_to_pdf(create_canvas, data, 50, y)
    create_canvas.save()
    logging.info("\n- INFO, PDF file '%s' created successfully." % pdf_file)


    
if __name__ == "__main__":
    if args["script_examples"]:
        script_examples()
    if args["ip"] and args["ssl"] or args["u"] or args["p"] or args["x"]:
        idrac_ip=args["ip"]
        idrac_username=args["u"]
        if args["p"]:
            idrac_password=args["p"]
        if not args["p"] and not args["x"] and args["u"]:
            idrac_password = getpass.getpass("\n- Argument -p not detected, pass in iDRAC user %s password: " % args["u"])
        if args["ssl"]:
            if args["ssl"].lower() == "true":
                verify_cert = True
            elif args["ssl"].lower() == "false":
                verify_cert = False
            else:
                verify_cert = False
        else:
            verify_cert = False
        check_supported_idrac_version()
    else:
        logging.error("\n- FAIL, invalid argument values or not all required parameters passed in. See help text or argument --script-examples for more details.")
        sys.exit(0)
    if args["generate_pdf"]:
        create_message_registry_pdf()
    else:
        logging.error("\n- FAIL, invalid argument values or not all required parameters passed in. See help text or argument --script-examples for more details.")
